const {
	SlashCommandBuilder,
	ChannelType,
	CommandInteraction,
	EmbedBuilder,
	ActionRowBuilder,
	ButtonBuilder,
	ButtonStyle
} = require('discord.js')
const ms = require('ms')
const polls = require('../models/polls')
const renderPoll = require('../utils/renderPoll')
const endPoll = require('../utils/endPoll')

module.exports = {
	data: new SlashCommandBuilder()
		.setName('poll')
		.setDescription('–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.')
		.addChannelOption((channelOption) =>
			channelOption
				.setName('–∫–∞–Ω–∞–ª')
				.setDescription('–ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.')
				.setRequired(true)
				.addChannelTypes(
					ChannelType.GuildText,
					ChannelType.GuildAnnouncement
				)
		)
		.addStringOption((timeOption) =>
			timeOption
				.setName('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
				.setDescription(
					'–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. (5m, 12h, 7d, ...)'
				)
				.setRequired(true)
		)
		.addStringOption((titleOption) =>
			titleOption
				.setName('–Ω–∞–∑–≤–∞–Ω–∏–µ')
				.setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
				.setRequired(true)
				.setMaxLength(256)
		)
		.addStringOption((option1) =>
			option1
				.setName('–≤–∞—Ä–∏–∞–Ω—Ç1')
				.setDescription('–í–∞—Ä–∏–∞–Ω—Ç 1 –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.')
				.setRequired(true)
		)
		.addStringOption((option2) =>
			option2
				.setName('–≤–∞—Ä–∏–∞–Ω—Ç2')
				.setDescription('–í–∞—Ä–∏–∞–Ω—Ç 2 –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.')
				.setRequired(true)
		)
		.addStringOption((option3) =>
			option3
				.setName('–≤–∞—Ä–∏–∞–Ω—Ç3')
				.setDescription('–í–∞—Ä–∏–∞–Ω—Ç 3 –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.')
				.setRequired(false)
		)
		.addStringOption((option4) =>
			option4
				.setName('–≤–∞—Ä–∏–∞–Ω—Ç4')
				.setDescription('–í–∞—Ä–∏–∞–Ω—Ç 4 –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.')
				.setRequired(false)
		)
		.addStringOption((option5) =>
			option5
				.setName('–≤–∞—Ä–∏–∞–Ω—Ç5')
				.setDescription('–í–∞—Ä–∏–∞–Ω—Ç 5 –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.')
				.setRequired(false)
		)
		.addAttachmentOption((imageOption) =>
			imageOption
				.setName('–∫–∞—Ä—Ç–∏–Ω–∫–∞')
				.setDescription('–ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.')
				.setRequired(false)
		),
	/**
	 * @param {CommandInteraction} interaction
	 */
	async execute(interaction) {
		const channel = interaction.options.getChannel('–∫–∞–Ω–∞–ª')
		const duration = ms(interaction.options.getString('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'))
		const endTime = Date.now() + duration
		const title = interaction.options.getString('–Ω–∞–∑–≤–∞–Ω–∏–µ')
		const image = interaction.options.getAttachment('–∫–∞—Ä—Ç–∏–Ω–∫–∞')
		const option1 = interaction.options.getString('–≤–∞—Ä–∏–∞–Ω—Ç1')
		const option2 = interaction.options.getString('–≤–∞—Ä–∏–∞–Ω—Ç2')
		const option3 = interaction.options.getString('–≤–∞—Ä–∏–∞–Ω—Ç3')
		const option4 = interaction.options.getString('–≤–∞—Ä–∏–∞–Ω—Ç4')
		const option5 = interaction.options.getString('–≤–∞—Ä–∏–∞–Ω—Ç5')

		const options = [option1, option2, option3, option4, option5]
			.filter((option) => option !== null)
			.map((option) => {
				return {
					name: option,
					votes: []
				}
			})

		if (isNaN(duration)) {
			return await interaction.reply({
				content: `\`${interaction.options.getString(
					'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
				)}\` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é`,
				ephemeral: true
			})
		}

		const pollEmbed = renderPoll(
			title,
			image?.url || null,
			endTime,
			options,
			interaction.guild.iconURL()
		)

		const pollOptionButtons = []
		const pollNumberEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£']

		for (let i = 0; i < options.length; i++) {
			const option = options[i]
			pollOptionButtons.push(
				new ButtonBuilder()
					.setCustomId(`option${i}`)
					.setEmoji(pollNumberEmojis[i])
					.setLabel(truncate(option.name, 80))
					.setStyle(ButtonStyle.Secondary)
			)
		}

		pollOptionButtons.length = options.length

		const pollActionRow = new ActionRowBuilder().setComponents(
			pollOptionButtons
		)

		const controllerEmbed = new EmbedBuilder()
			.setDescription(`–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ \`${title}\` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${channel}`)
			.setTimestamp()
			.setFooter({
				text: interaction.guild.name,
				iconURL: interaction.guild.iconURL()
			})
			.setColor('#248046')

		const controllerPollEndEarlyButton = new ButtonBuilder()
			.setCustomId('endPoll')
			.setEmoji('üîí')
			.setLabel('–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
			.setStyle(ButtonStyle.Danger)
		const controllerActionRow = new ActionRowBuilder().addComponents(
			controllerPollEndEarlyButton
		)

		await interaction
			.reply({
				embeds: [controllerEmbed],
				components: [controllerActionRow],
				fetchReply: true
			})
			.then(async (controllerMessageReply) => {
				channel
					.send({
						embeds: [pollEmbed],
						components: [pollActionRow]
					})
					.then((pollMessage) => {
						polls.create({
							messageId: pollMessage.id,
							controllerMessageId: controllerMessageReply.id,
							endTime,
							title,
							image: image ? image.url : null,
							options
						})

						setTimeout(() => {
							endPoll(
								pollMessage,
								controllerMessageReply,
								options
							)
						}, duration)
					})
			})
	}
}

function truncate(str, maxlength) {
	return str
		? str.length > maxlength
			? str.slice(0, maxlength - 1) + '‚Ä¶'
			: str
		: '---'
}
